{"version":3,"sources":["scripts/app-808e12b29c.js"],"names":["angular","module","csvReader","CSV","$log","restrict","require","link","scope","element","attrs","ngModel","read","reader","FileReader","file","get","files","onload","csv","result","header","$setViewValue","parse","readAsText","on","$evalAsync","$inject","directive","MainController","leafletData","toastr","csvChanged","vm","Object","keys","csvRows","renderHeatmap","form","$valid","getMap","then","map","clearHeatmap","heatmap","L","TileLayer","WebGLHeatMap","heatmapOptions","forEach","row","point","parseRow","addDataPoint","apply","addLayer","debug","removeLayer","latitudeColumn","longitudeColumn","pointIntensity","this","center","lat","lng","zoom","defaults","layers","baselayers","googleRoadmap","name","layerType","type","size","autoresize","controller","runBlock","run","routerConfig","$stateProvider","$urlRouterProvider","state","url","templateUrl","controllerAs","otherwise","config","constant","moment","$logProvider","toastrConfig","debugEnabled","allowHtml","timeOut","positionClass","preventDuplicates","progressBar","$templateCache","put"],"mappings":"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","file":"scripts/app-808e12b29c.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap', ['ngAnimate', 'ngCookies', 'ngTouch', 'ngSanitize', 'ngMessages', 'ui.router', 'ui.bootstrap', 'toastr', 'ui-leaflet']);\n\n})();\n\n(function () {\n  'use strict';\n\n  angular.module('csvToHeatmap')\n    .directive('csvReader', csvReader);\n\n  /** @ngInject */\n  function csvReader(CSV, $log) {\n\n    return {\n      restrict: 'A',\n      require: '?ngModel',\n      link: function (scope, element, attrs, ngModel) {\n        if (!ngModel) return;\n\n        element.on('change', function () {\n          scope.$evalAsync(read);\n        });\n\n        function read() {\n          var reader = new FileReader();\n          var file = element.get(0).files[0];\n\n          reader.onload = function () {\n            var csv = new CSV(reader.result, {header: true});\n            ngModel.$setViewValue(csv.parse());\n          };\n\n          reader.readAsText(file);\n        }\n      }\n    };\n\n  }\n})();\n(function () {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap')\n    .controller('MainController', MainController);\n\n  /** @ngInject */\n  function MainController($log, leafletData, toastr) {\n    var vm = this;\n\n    vm.csvRows = [];\n\n    vm.csvChanged = csvChanged;\n    vm.renderHeatmap = renderHeatmap;\n\n    vm.map = {\n      center: {\n        lat: 42.34,\n        lng: -71.1,\n        zoom: 11\n      },\n      defaults: {},\n      layers: {\n        baselayers: {\n          googleRoadmap: {\n            name: 'Google Streets',\n            layerType: 'ROADMAP',\n            type: 'google'\n          }\n        }\n      }\n    };\n\n    vm.heatmapOptions = {\n      size: 750,\n      autoresize: true\n    };\n\n    vm.pointIntensity = 8;\n    vm.header = [];\n    vm.latitudeColumn = null;\n    vm.longitudeColumn = null;\n\n    var heatmap;\n\n    function csvChanged() {\n      vm.header = Object.keys(vm.csvRows[0]);\n    }\n\n    function renderHeatmap(form) {\n\n      if (!form.$valid) {\n        $log.debug('invalid');\n        return;\n      }\n\n\n      leafletData.getMap().then(function (map) {\n\n        clearHeatmap(map, heatmap);\n\n        heatmap = new L.TileLayer.WebGLHeatMap(vm.heatmapOptions);\n        vm.csvRows.forEach(function (row) {\n          var point = parseRow(row);\n          heatmap.addDataPoint.apply(heatmap, point);\n        });\n\n        map.addLayer(heatmap);\n        $log.debug('Done');\n      });\n    }\n\n    function clearHeatmap(map, heatmap) {\n      if (heatmap) {\n        map.removeLayer(heatmap);\n        $log.debug('Removed');\n      }\n    }\n\n    function parseRow(row) {\n      return [row[vm.latitudeColumn], row[vm.longitudeColumn], vm.pointIntensity];\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('home', {\n        url: '/',\n        templateUrl: 'app/main/main.html',\n        controller: 'MainController',\n        controllerAs: 'Main'\n      });\n\n    $urlRouterProvider.otherwise('/');\n  }\n\n})();\n\n/* global moment:false, CSV:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap')\n    .constant('CSV', CSV)\n    .constant('moment', moment);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider, toastrConfig) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options third-party lib\n    toastrConfig.allowHtml = true;\n    toastrConfig.timeOut = 3000;\n    toastrConfig.positionClass = 'toast-top-right';\n    toastrConfig.preventDuplicates = false;\n    toastrConfig.progressBar = false;\n  }\n\n})();\n\nangular.module(\"csvToHeatmap\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/main/main.html\",\"<div class=\\\"row\\\"><div class=\\\"col-md-8\\\"><leaflet defaults=\\\"Main.map.defaults\\\" layers=\\\"Main.map.layers\\\" lf-center=\\\"Main.map.center\\\" height=\\\"480px\\\" width=\\\"100%\\\"></leaflet></div><div class=\\\"col-md-4\\\"><form name=\\\"csvForm\\\" ng-submit=\\\"Main.renderHeatmap(csvForm)\\\"><div class=\\\"form-group\\\"><label class=\\\"control-label\\\">CSV File</label> <input ng-model=\\\"Main.csvRows\\\" type=\\\"file\\\" name=\\\"csv\\\" ng-change=\\\"Main.csvChanged()\\\" csv-reader=\\\"\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"intensity\\\">Point intensity (%)</label> <input type=\\\"number\\\" name=\\\"intensity\\\" min=\\\"0\\\" max=\\\"100\\\" ng-model=\\\"Main.pointIntensity\\\" class=\\\"form-control\\\" id=\\\"intensity\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"radius\\\">Point radius (meters)</label> <input name=\\\"radius\\\" type=\\\"number\\\" min=\\\"0\\\" max=\\\"10000\\\" ng-model=\\\"Main.heatmapOptions.size\\\" class=\\\"form-control\\\" id=\\\"radius\\\"></div><div class=\\\"form-group\\\" ng-class=\\\"{\\'has-error\\': csvForm.$submitted && csvForm.latitudeColumn.$invalid}\\\"><label class=\\\"control-label\\\" for=\\\"latitudeColumn\\\">Latitude column</label><select name=\\\"latitudeColumn\\\" class=\\\"form-control\\\" ng-model=\\\"Main.latitudeColumn\\\" required=\\\"\\\" id=\\\"latitudeColumn\\\"><option ng-repeat=\\\"headerName in Main.header\\\">{{ headerName }}</option></select><div ng-messages=\\\"csvForm.latitudeColumn.$error\\\" ng-show=\\\"csvForm.$submitted\\\"><div ng-messages-include=\\\"error-messages\\\"></div></div></div><div class=\\\"form-group\\\" ng-class=\\\"{\\'has-error\\': csvForm.$submitted && csvForm.longitudeColumn.$invalid}\\\"><label class=\\\"control-label\\\" for=\\\"longitudeColumn\\\">Longitude column</label><select name=\\\"longitudeColumn\\\" class=\\\"form-control\\\" ng-model=\\\"Main.longitudeColumn\\\" required=\\\"\\\" id=\\\"longitudeColumn\\\"><option ng-repeat=\\\"headerName in Main.header\\\">{{ headerName }}</option></select><div ng-messages=\\\"csvForm.longitudeColumn.$error\\\" ng-show=\\\"csvForm.$submitted\\\"><div ng-messages-include=\\\"error-messages\\\"></div></div></div><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Render heatmap</button></form></div></div>\");\n$templateCache.put(\"app/components/csv-reader/csv-reader.html\",\"<input type=\\\"file\\\" name=\\\"csv\\\">\");}]);"],"sourceRoot":"/source/"}