{"version":3,"sources":["scripts/app-a400736d93.js"],"names":["angular","module","filterColumn","_","require","scope","link","elm","attrs","ctrl","$validators","modelValue","$isEmpty","uniq","pluck","length","$inject","directive","coordinateColumn","isFinite","csvReader","CSV","restrict","element","ngModel","read","reader","FileReader","file","get","files","onload","csv","result","header","$setViewValue","parse","readAsText","updateValidity","$setValidity","val","on","$evalAsync","controlGroup","transclude","templateUrl","fieldLabel","fieldName","labelWidth","el","formCtrl","form","MainController","leafletData","L","csvChanged","vm","Object","keys","csvRows","latitudeColumn","longitudeColumn","filterByColumn","filterOptions","filterOptionsSelected","renderHeatmap","$valid","filteredRows","filter","row","contains","_renderHeatmap","rows","getMap","then","map","heatmap","removeLayer","TileLayer","WebGLHeatMap","heatmapOptions","forEach","point","parseRow","addDataPoint","apply","addLayer","filterByColumnChanged","column","sort","copy","pointIntensity","isFilterSelected","value","toggleFilterSelected","without","push","setFilterSelected","filters","fitBounds","latColumn","lngColumn","bounds","this","center","lat","lng","zoom","defaults","layers","baselayers","googleRoadmap","name","layerType","type","size","autoresize","controller","runBlock","$log","debug","run","routerConfig","$stateProvider","$urlRouterProvider","state","url","controllerAs","otherwise","config","constant","moment","$logProvider","toastrConfig","debugEnabled","allowHtml","timeOut","positionClass","preventDuplicates","progressBar","$templateCache","put"],"mappings":"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","file":"scripts/app-a400736d93.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap', ['ngAnimate', 'ngCookies', 'ngTouch', 'ngSanitize', 'ngMessages', 'ui.router', 'ui.bootstrap', 'toastr', 'ui-leaflet']);\n\n})();\n\n/**\n * Validation rule for column name. Check is values of the selected column has less then 500 unique values.\n */\n(function () {\n  'use strict';\n\n  angular.module('csvToHeatmap')\n    .directive('filterColumn', filterColumn);\n\n  /** @ngInject */\n  function filterColumn(_) {\n    return {\n      require: 'ngModel',\n      scope: {\n        filterColumn: '='\n      },\n      link: function (scope, elm, attrs, ctrl) {\n        ctrl.$validators.filterColumn = function (modelValue) {\n          if (ctrl.$isEmpty(modelValue)) {\n            return true;\n          }\n\n          return _.uniq(_.pluck(scope.filterColumn, modelValue)).length <= 500;\n        };\n      }\n    };\n  }\n})();\n/**\n * Validate input as coordinate (latitude or longitude)\n */\n(function () {\n  'use strict';\n\n  angular.module('csvToHeatmap')\n    .directive('coordinateColumn', coordinateColumn);\n\n  /** @ngInject */\n  function coordinateColumn() {\n    return {\n      require: 'ngModel',\n      scope: {\n        coordinateColumn: '='\n      },\n      link: function (scope, elm, attrs, ctrl) {\n        ctrl.$validators.coordinateColumn = function (modelValue) {\n\n          if (ctrl.$isEmpty(modelValue) || !scope.coordinateColumn) {\n            return true;\n          }\n\n          return isFinite(scope.coordinateColumn[modelValue]);\n        };\n      }\n    };\n  }\n})();\n/**\n * Attribute directive for the file input. Parse selected csv file and update model value with the result.\n */\n(function () {\n  'use strict';\n\n  angular.module('csvToHeatmap')\n    .directive('csvReader', csvReader);\n\n  /** @ngInject */\n  function csvReader(CSV) {\n\n    return {\n      restrict: 'A',\n      require: '?ngModel',\n      link: function (scope, element, attrs, ngModel) {\n        if (!ngModel) return;\n        updateValidity();\n\n        element.on('change', function () {\n          updateValidity();\n          scope.$evalAsync(read);\n        });\n\n        function read() {\n          var reader = new FileReader();\n          var file = element.get(0).files[0];\n\n          reader.onload = function () {\n            var csv = new CSV(reader.result, {header: true});\n            ngModel.$setViewValue(csv.parse());\n          };\n\n          reader.readAsText(file);\n        }\n\n        function updateValidity() {\n          ngModel.$setValidity('required', element.val() != '');\n        }\n      }\n    };\n\n  }\n})();\n/**\n * directive for bootstrap form-group\n */\n(function () {\n  'use strict';\n\n  angular.module('csvToHeatmap')\n    .directive('controlGroup', controlGroup);\n\n  /** @ngInject */\n  function controlGroup() {\n\n    return {\n      restrict: 'E',\n      transclude: true,\n      require: '^form',\n      templateUrl: 'app/components/control-group/control-group.html',\n      scope: {\n        fieldLabel: '@',\n        fieldName: '@',\n        labelWidth: '@'\n      },\n      link: function (scope, el, attrs, formCtrl) {\n        scope.form = formCtrl;\n      }\n    };\n  }\n})();\n/**\n * @name Main\n * @type MainController\n */\n(function () {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap')\n    .controller('MainController', MainController);\n\n  /** @ngInject */\n  function MainController(leafletData, L, _) {\n    var vm = this;\n\n    vm.csvRows = []; // parsed rows\n    vm.pointIntensity = 8; // @see\n    vm.header = [];\n    vm.latitudeColumn = null;\n    vm.longitudeColumn = null;\n    vm.filterByColumn = null;\n    vm.filterOptions = null;\n    vm.filterOptionsSelected = null;\n\n    vm.csvChanged = csvChanged;\n    vm.filterByColumnChanged = filterByColumnChanged;\n    vm.renderHeatmap = renderHeatmap;\n    vm.isFilterSelected = isFilterSelected;\n    vm.toggleFilterSelected = toggleFilterSelected;\n    vm.setFilterSelected = setFilterSelected;\n    vm.fitBounds = fitBounds;\n\n    vm.map = {\n      center: {\n        lat: 51.4768219,\n        lng: -0.0006172,\n        zoom: 14\n      },\n      defaults: {},\n      layers: {\n        baselayers: {\n          googleRoadmap: {\n            name: 'Google Streets',\n            layerType: 'ROADMAP',\n            type: 'google'\n          }\n        }\n      }\n    };\n\n    vm.heatmapOptions = {\n      size: 750,\n      autoresize: true\n    };\n\n\n    var heatmap;\n\n    /**\n     * Listen to csv change, update header columns and reset file related options\n     */\n    function csvChanged() {\n      vm.header = Object.keys(vm.csvRows[0]);\n\n      vm.latitudeColumn = null;\n      vm.longitudeColumn = null;\n      vm.filterByColumn = null;\n      vm.filterOptions = null;\n      vm.filterOptionsSelected = null;\n    }\n\n    function renderHeatmap(form) {\n      if (!form.$valid) {\n        return;\n      }\n\n      // if filtering used then filter rows and show, otherwise just show all\n      if (vm.filterOptionsSelected !== null) {\n        var filteredRows = vm.csvRows.filter(function (row) {\n          return _.contains(vm.filterOptionsSelected, row[vm.filterByColumn]);\n        });\n        _renderHeatmap(filteredRows);\n      } else {\n        _renderHeatmap(vm.csvRows);\n      }\n    }\n\n    function _renderHeatmap (rows) {\n      leafletData.getMap().then(function (map) {\n\n        // Recreate heatmap\n        if (heatmap) {\n          map.removeLayer(heatmap);\n        }\n        heatmap = new L.TileLayer.WebGLHeatMap(vm.heatmapOptions);\n\n        rows.forEach(function (row) {\n          var point = parseRow(row);\n          heatmap.addDataPoint.apply(heatmap, point);\n        });\n\n        map.addLayer(heatmap);\n      });\n    }\n\n    /**\n     * When changed column to filter by\n     *\n     * @param column\n     */\n    function filterByColumnChanged(column) {\n      if (vm.filterByColumn && column.$valid) {\n        vm.filterOptions = _.uniq(_.pluck(vm.csvRows, vm.filterByColumn)).sort();\n        vm.filterOptionsSelected = angular.copy(vm.filterOptions);\n      }\n    }\n\n    /**\n     * get [lat, lng, intesity] from row by columns\n     *\n     * @param row\n     * @returns {*[]}\n     */\n    function parseRow(row) {\n      return [row[vm.latitudeColumn], row[vm.longitudeColumn], vm.pointIntensity];\n    }\n\n    /**\n     * check is filter selected to show checked checkbox icon\n     *\n     * @param value\n     * @returns {boolean}\n     */\n    function isFilterSelected(value) {\n      return _.contains(vm.filterOptionsSelected, value);\n    }\n\n    /**\n     * check/uncheck filter\n     *\n     * @param value\n     */\n    function toggleFilterSelected(value) {\n      if (_.contains(vm.filterOptionsSelected, value)) {\n        vm.filterOptionsSelected = _.without(vm.filterOptionsSelected, value);\n      } else {\n        vm.filterOptionsSelected.push(value);\n      }\n    }\n\n    function setFilterSelected(filters) {\n      vm.filterOptionsSelected = angular.copy(filters);\n    }\n\n    /**\n     * On lat/lng column change trying to fit map to points. checks both columns has been set and valid\n     *\n     * @param latColumn\n     * @param lngColumn\n     */\n    function fitBounds(latColumn, lngColumn) {\n\n      if (!vm.latitudeColumn || !vm.longitudeColumn || !latColumn.$valid || !lngColumn.$valid) {\n        return;\n      }\n\n      var bounds = [];\n      vm.csvRows.forEach(function (row) {\n        var point = parseRow(row);\n        bounds.push([point[0], point[1]]);\n      });\n      leafletData.getMap().then(function (map) {\n        map.fitBounds(bounds);\n      });\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('home', {\n        url: '/',\n        templateUrl: 'app/main/main.html',\n        controller: 'MainController',\n        controllerAs: 'Main'\n      });\n\n    $urlRouterProvider.otherwise('/');\n  }\n\n})();\n\n/* global moment:false, CSV:false, L:false, _:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap')\n    .constant('CSV', CSV)\n    .constant('L', L)\n    .constant('_', _)\n    .constant('moment', moment);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('csvToHeatmap')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider, toastrConfig) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options third-party lib\n    toastrConfig.allowHtml = true;\n    toastrConfig.timeOut = 3000;\n    toastrConfig.positionClass = 'toast-top-right';\n    toastrConfig.preventDuplicates = false;\n    toastrConfig.progressBar = false;\n  }\n\n})();\n\nangular.module(\"csvToHeatmap\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/main/main.html\",\"<div class=\\\"row\\\"><div class=\\\"col-md-8\\\" style=\\\"margin-bottom: 2em;\\\"><leaflet defaults=\\\"Main.map.defaults\\\" layers=\\\"Main.map.layers\\\" lf-center=\\\"Main.map.center\\\" height=\\\"400px\\\" width=\\\"100%\\\"></leaflet><div ng-if=\\\"Main.filterByColumn\\\" style=\\\"margin: 1em 0;\\\"><a class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"Main.setFilterSelected(Main.filterOptions)\\\">Select all</a> <a class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"Main.setFilterSelected([])\\\">Select none</a></div><table class=\\\"table table-condensed table-hover\\\" ng-if=\\\"Main.filterByColumn\\\"><tbody><tr ng-repeat=\\\"filterValue in Main.filterOptions\\\" ng-click=\\\"Main.toggleFilterSelected(filterValue)\\\" style=\\\"cursor: pointer\\\" class=\\\"no-text-select\\\"><td style=\\\"width: 1%\\\"><i class=\\\"glyphicon glyphicon-unchecked\\\" ng-show=\\\"!Main.isFilterSelected(filterValue)\\\"></i> <i class=\\\"glyphicon glyphicon-check\\\" ng-show=\\\"Main.isFilterSelected(filterValue)\\\"></i></td><td>{{ ::filterValue }}</td><td></td></tr></tbody></table></div><div class=\\\"col-md-4\\\" style=\\\"margin-bottom: 2em;\\\"><form name=\\\"csvForm\\\" ng-submit=\\\"Main.renderHeatmap(csvForm)\\\"><control-group field-label=\\\"CSV File\\\" field-name=\\\"csvFile\\\"><input name=\\\"csvFile\\\" type=\\\"file\\\" ng-model=\\\"Main.csvRows\\\" ng-change=\\\"Main.csvChanged()\\\" csv-reader=\\\"\\\"></control-group><control-group field-label=\\\"Point intensity (%)\\\" field-name=\\\"intensity\\\"><input name=\\\"intensity\\\" type=\\\"number\\\" min=\\\"0\\\" max=\\\"100\\\" ng-model=\\\"Main.pointIntensity\\\" class=\\\"form-control\\\"></control-group><control-group field-label=\\\"Point radius (meters)\\\" field-name=\\\"radius\\\"><input name=\\\"radius\\\" type=\\\"number\\\" min=\\\"0\\\" max=\\\"10000\\\" ng-model=\\\"Main.heatmapOptions.size\\\" class=\\\"form-control\\\"></control-group><control-group field-label=\\\"Latitude column\\\" field-name=\\\"latitudeColumn\\\"><select name=\\\"latitudeColumn\\\" ng-model=\\\"Main.latitudeColumn\\\" required=\\\"\\\" ng-change=\\\"Main.fitBounds(csvForm.latitudeColumn, csvForm.longitudeColumn)\\\" coordinate-column=\\\"Main.csvRows[0]\\\" class=\\\"form-control\\\"><option ng-repeat=\\\"headerName in Main.header\\\">{{ headerName }}</option></select></control-group><control-group field-label=\\\"Longitude column\\\" field-name=\\\"longitudeColumn\\\"><select name=\\\"longitudeColumn\\\" ng-model=\\\"Main.longitudeColumn\\\" required=\\\"\\\" ng-change=\\\"Main.fitBounds(csvForm.latitudeColumn, csvForm.longitudeColumn)\\\" coordinate-column=\\\"Main.csvRows[0]\\\" class=\\\"form-control\\\"><option ng-repeat=\\\"headerName in Main.header\\\">{{ headerName }}</option></select></control-group><control-group field-label=\\\"Filter by column (optional)\\\" field-name=\\\"filterByColumn\\\"><select name=\\\"filterByColumn\\\" ng-model=\\\"Main.filterByColumn\\\" ng-change=\\\"Main.filterByColumnChanged(csvForm.filterByColumn)\\\" filter-column=\\\"Main.csvRows\\\" class=\\\"form-control\\\"><option value=\\\"\\\">---None---</option><option ng-repeat=\\\"headerName in Main.header\\\">{{ headerName }}</option></select></control-group><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" ng-disabled=\\\"csvForm.$invalid && csvForm.$submitted\\\">Render heatmap</button></form></div></div>\");\n$templateCache.put(\"app/components/control-group/control-group.html\",\"<div class=\\\"form-group\\\" ng-class=\\\"{ \\'has-error\\': (form[fieldName].$dirty || form.$submitted) && form[fieldName].$invalid }\\\"><label ng-if=\\\"fieldLabel\\\" class=\\\"control-label\\\">{{ fieldLabel }}</label><ng-transclude></ng-transclude><div ng-messages=\\\"form[fieldName].$error\\\" ng-if=\\\"form[fieldName].$dirty || form.$submitted\\\"><div ng-messages-include=\\\"app/components/control-group/messages.html\\\"></div></div></div>\");\n$templateCache.put(\"app/components/control-group/messages.html\",\"<p ng-message=\\\"required\\\" class=\\\"help-block\\\">This field is required</p><p ng-message=\\\"filterColumn\\\" class=\\\"help-block\\\">This column has over 500 different values, so you can\\'t filter by it</p><p ng-message=\\\"coordinateColumn\\\" class=\\\"help-block\\\">This CSV has invalid cooardinates in this column</p>\");}]);"],"sourceRoot":"/source/"}